'''
HashTable stores value  in the list at index generated by hashfunction using the
key associated with value.
'''

class HashTable():
    def __init__(self):
        self.size = 10
        self.key = [None]*self.size
        self.value = [None]*self.size

    def _hashfunction(self,key):
        'it generates hash for the HashTable'
        total = 0
        for i in key:
            total += ord(i)
        return total % self.size

    def put(self,key,value):
        'Add item in the HashTable.Note-- Linear Probing is used.'
        index = self._hashfunction(key)
        while self.value[index] is not None:
            if self.key[index] == key:
                self.value[index] = data
                return None
            index = (index+1) % self.size
        self.key[index] = key
        self.value[index] = value

    def get_item(self,key):
        'It return the item from HashTable.'
        index = self._hashfunction(key)
        while self.key[index] != key:
            index = (index+1) % self.size
        return self.value[index]

    def del_item(self,key):
        'Delete the item from HashTable'
        index = self._hashfunction(key)
        while self.key[index] != key:
            index = (index+1) % self.size
        del self.key[index]
        del self.value[index]
